generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

// User系
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  emailVerified   DateTime?
  hashedpassword  String
  image           String?
  accounts        Account[]
  sessions        Session[]
  deliveryAddress DeliveryAddress[]
  items           Item[]
  likes           Like[]
  cart            Cart?
  updatedAt       DateTime          @updatedAt
  role            Role              @default(CUSTOMER)
}

model DeliveryAddress {
  id          String @id @default(cuid())
  userId      String
  address     String
  city        String
  state       String
  postalCode  String
  country     String
  phoneNumber String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  CUSTOMER
  SALES
  ADMIN
}

// Item系
model Item {
  id                  String       @id @default(cuid())
  userId              String
  name                String
  description         String?
  price               Float
  uom                 Uom          @default(USD)
  primaryCategoryId   String
  secondaryCategoryId String?
  images              ItemImage[]
  orderItems          OrderItems[]
  inventory           Inventory[]
  cartItems           CartItems[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  primaryCategory  Category  @relation("primaryCategory", fields: [primaryCategoryId], references: [id], onDelete: Cascade)
  secondayCategory Category? @relation("secondaryCategory", fields: [secondaryCategoryId], references: [id], onDelete: SetNull)
}

enum Uom {
  USD
  JYP
}

model Category {
  id             String   @id @default(cuid())
  name           String
  primaryItems   Item[]   @relation("primaryCategory")
  secondaryItems Item[]   @relation("secondaryCategory")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ItemImage {
  id          String   @id @default(cuid())
  itemId      String
  url         String
  description String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

// Order系
model Order {
  id                String       @id @default(cuid())
  userId            String
  deliveryAddressId String
  status            OrderStatus  @default(PENDING)
  totalPrice        Float
  orderItems        OrderItems[]
  createdAt         DateTime     @default(now()) // 注文日
  updatedAt         DateTime     @updatedAt
}

enum OrderStatus {
  PENDING // 注文が作成され、支払い待ち
  CONFIRMED // 支払いが確認され、注文が確定
  PREPARING // 注文が準備中（商品のピッキングや梱包など）
  SHIPPED // 注文が出荷され、配送中
  DELIVERED // 注文が配達され、完了
  CANCELLED // 注文がキャンセルされた
  RETURNED // 注文が返品された
}

model OrderItems {
  id            String   @id @default(cuid())
  orderId       String
  itemId        String
  quantity      Int
  purchasePrice Float // 購入時価格
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item  Item  @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Inventory {
  id        String   @id @default(cuid())
  itemId    String
  quantity  String //在庫数
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

// Review系
model Review {
  id        String     @id @default(cuid())
  userId    String
  itemId    String
  title     String
  content   String
  rate      ReviewRate
  likes     Like[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum ReviewRate {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

// Cart系
model Cart {
  id        String      @id @default(cuid())
  userId    String      @unique
  cartItems CartItems[]
  updatedAt DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItems {
  id        String   @id @default(cuid())
  cartId    String
  itemId    String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
}
